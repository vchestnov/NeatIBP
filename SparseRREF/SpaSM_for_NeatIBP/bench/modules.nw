\documentclass[a4paper]{article}
\usepackage{noweb}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}

\usepackage{amsmath,amsfonts,amssymb}
%\usepackage{textcomp}
%\usepackage{mathabx}
\usepackage{mathtools}
\usepackage{parskip}
\usepackage{geometry}
\usepackage{tikz}
\usepackage{xspace}

\newcommand{\X}{\ensuremath\mathcal{X}\xspace}
\newcommand{\Y}{\ensuremath\mathcal{Y}\xspace}
\newcommand{\C}{\mathcal{C}}

\begin{document}

\title{Computing Maximal (Strong) Modules of a Sparse Graph}
\author{Charles Bouillaguet}

\maketitle

The goal of the procedure described here, starting from an $n \times n$
symmetric matrix $A$, is to compute three matrices :

\begin{description}

\item[$S$] is an $n \times n$ matrix that contains the edges that do not cross
a module boundary, i.e. it is the union of all the subgraphs induced by the
elements of $mathcal{M}(G, v)$. It is therefore a subset of the original
matrix.

\item[$M$] is an $m \times n$ matrix that decribes each module. $M_ij = 1$
means that vertex $j$ belongs to module $i$.

\item[$Q$] is an $m \times m$ matrix that decribes the quotient graph (i.e. $Q_ij = 1$ iff all vertices of module $i$ are connected to all vertices of module $j$)
\end{description}

If the modular decomposition of the input graph is sufficiently non-trivial,
then it can be hoped that the sum of the sizes of these three matrices is
smaller than the size of the original.

It seems likely that $S$ may also be highly redundant (and in any case, it has
at least $m$ connected components).

The original matrix $A$ can be reconstituted from $(S, M, Q)$, by adding to
$S$ the edges described by $M$ and $Q$.

<<Type definitions>>=
struct modular_partition_t {
	spasm *S, *M, *Q;
};


@ \section{Approach}

The code written here is an implementation of partition refinement with the
goal of computing a modular partition. Given a partition of the vertices, it
refines it and returns the coarsest partition in which all sets are modules of
the graph. Therefore, if \emph{one} maximal strong module $M$, were known, we
could start the procedure with $[M, \overline{M}]$ and end up with the
(unique) partition into maximal strong modules.

To deal with this bootstrapping problem, we instead compute a so-called
\emph{$v$-modular partition}:
\[
\mathcal{M}(G, v) = \{v\} \cup \{ M~|~ M \text{ is a maximal module not containing } v\}.
\]

It is the coarsest modular partition which is finer that $[\overline{\{v\}},
\{v\}]$. Computing \emph{the} modular partition of $G$ is harder, so we
leave it for future work. Here is how it could be done: the algorithm
implemented here could be modified to compute a \emph{factorizing
permutation}. Then, from there, the actual maximal strong modules of $G$ could
be easily identified.

We may thus have non-maximal modules (e.g. we split $P_3$ in three, whereas it
has only two strong maximal modules). In general, we have one extra module per
connected component of the input graph.

Connected components of $G$ (or $\overline{G}$) are (trivial) maximal strong
modules of $G$. Many sparse matrices do not describe connected graphs, but
with very few exceptions their complement graph is connected (this is a
consequence of their sparsity).

Therefore, we identify an arbitrary vertex $x_i$ in each connected component
$\C_i$ and we build the following initial partition: 
\[ 
	[\C_1 - \{x_1\}, \{x_1\}, \dots, \C_k - \{x_k\}, \{x_k\}] 
\]


<<The [[modular_partition]] function>>=
struct modular_partition_t * modular_partition(spasm *A)
{
	<<Variables of [[modular_partition]]>>

	<<Build initial partition>>
	<<Refine the partition>>
	<<Build the result and clean-up>>
}

@ The meat of the algorithm is the partition refinement step. Our implementation
mostly follows Algorithm 4 of the HDR of christophe Paul. We chose slighlty
different data structures though.


\section{Data Structures}

Instead of the data structure suggested by Paul et al. (doubly-linked list of
the nodes, and classes implicitly ordered by the nodes), we use the following:

\begin{itemize}
\item \emph{Nodes}, which represent vertices of the graph. Nodes are held in
doubly linked lists (one for each class).

\item \emph{Classes}, which are sets of nodes. Classes are ordered and belong to a doubly-linked list.
\end{itemize}

<<Type definitions>>=
struct node_t;
struct class_t;

struct node_t {
	struct node_t *prev, *next;
	int vertex;
	struct class_t *class;
};

struct class_t {
	struct class_t *prev, *next;
	struct node_t *nodes;
	int size;
	<<Extra fields of [[struct class_t]]>>
};

@ \subsection{Low-Level Operations}

As instructed by Knuth, we use circular doubly linked-list with a special head
cell.

We start by low-level functions dealing with the class list. First, the
creation/destruction of a class. The only noteworthy detail is that we also
create/destroy the ``head node'' of the associated node doubly-linked list.
The [[prev]] and [[next]] pointers of the class are left dangling.

<<Functions>>=
struct class_t *class_new()
{
	struct class_t *C = spasm_malloc(sizeof(*C));
	struct node_t *head = spasm_malloc(sizeof(*head));
	C->nodes = head;
	head->next = head;
	head->prev = head;
	// head->vertex = -1;
	head->class = C;
	C->size = 0;
	<<Setup extra fields of [[C]]>>
	return C;
}

void class_destroy(struct class_t *C)
{
	free(C->nodes);
	free(C);
}

<<Functions>>=
void print_class(struct class_t *X)
{
	for (struct node_t * x = X->nodes->next; x != X->nodes; x = x->next)
		printf("%d ", x->vertex + 1);
}

void print_partition(struct class_t *class_head)
{
	printf("P = ");
	for (struct class_t * X = class_head->next; X != class_head; X = X->next) {
		print_class(X);
		printf("| ");
	}
	printf("\n");
}


@ Next comes the insertion/removal of a class in the class list. Both
operations are particularly simple because the class list is never empty (it
always contains the ``head'' class). The insertion functions inserts $\C$ to
the \emph{right} of $\X$. If we wanted a factorizing permutation, we would
have to choose whether to insert left or right.


<<Functions>>=
void class_insert(struct class_t *C, struct class_t *X)
{
	X->prev = C;
	X->next = C->next;
	X->prev->next = X;
	X->next->prev = X;
}

void class_remove(struct class_t *X)
{
	X->next->prev = X->prev;
	X->prev->next = X->next;
}

@ Lastly, two similar functions to add/remove a node from a class. Nodes are
always inserted to the right of the ``head node'' of the node list of the
class.

<<Functions>>=
void node_insert(struct node_t *x, struct class_t *C)
{
	x->class = C;
	C->size++;
	struct node_t *head = C->nodes;
	x->prev = head;
	x->next = head->next;
	x->next->prev = x;
	x->prev->next = x;
}

void node_remove(struct node_t *x)
{
	x->class->size--;
	x->next->prev = x->prev;
	x->prev->next = x->next;
}

@ The culmination of all this is a utility function that transfers an element
from one class to another class.

<<Functions>>=
void transfer(struct class_t *X, struct class_t *Y, struct node_t *x)
{
	if (x->class != X)
		return;
	node_remove(x);
	node_insert(x, Y);
}


@ \section{Building the Initial Partition}

Let's see how the class and node lists are initially set up. We need to be
able to access nodes by vertex number, so we store them in an array. We then
put all nodes in an ``initial'' class that will be split.

<<Build initial partition>>=
<<Setup class list>>
<<Setup nodes; put them in the initial class>>
<<Isolate one vertex per connected component>>
<<If the initial class is empty, then remove it>>

<<Variables of [[modular_partition]]>>=
struct class_t * class_head;
struct node_t * nodes;
int *Ap = A->p;
int *Aj = A->j;
int n = A->n;

<<Setup class list>>=
class_head = class_new();
class_head->next = class_head;
class_head->prev = class_head;
// class_head->size = -1;
struct class_t *initial_class = class_new();
class_insert(class_head, initial_class);

<<Setup nodes; put them in the initial class>>=
nodes = spasm_malloc(n * sizeof(*nodes));
for (int i = 0; i < n; i++) {
	nodes[i].vertex = i;
	node_insert(&nodes[i], initial_class);
}


@ We must then split the initial class for each connected component. We will
use a simple BFS.

<<Isolate one vertex per connected component>>=
int *queue = spasm_malloc(n * sizeof(int));
int *mark = spasm_calloc(n, sizeof(int));
int lo = 0, hi = 0;
for (int i = 0; i < n; i++) {
	if (mark[i])
		continue;
	<<Mark connected component containing $i$>>
	<<If $|\C_i| \geq 2$, then create class $\{i\}$ and remove $i$ from [[initial_class]]>>
}
free(queue);
free(mark);


<<Mark connected component containing $i$>>=
int start = hi;
queue[hi++] = i;
mark[i] = 1;
while (lo < hi) {
	int u = queue[lo++];
	for (int it = Ap[u]; it < Ap[u + 1]; it++) {
		int v = Aj[it];
		if (mark[v])
			continue;
		queue[hi++] = v;
		mark[v] = 1;
	}
}

<<If $|\C_i| \geq 2$, then create class $\{i\}$ and remove $i$ from [[initial_class]]>>=
if (hi - start <= 2)
	continue;
struct node_t * x = &nodes[i];
struct class_t *class = class_new();
class_insert(initial_class, class);
transfer(initial_class, class, x);


<<If the initial class is empty, then remove it>>=
if (initial_class->size == 0) {
	class_remove(initial_class);
	class_destroy(initial_class);
}


@ Of course, we must clean-up everything when the computation is done. For
this we walk the class list.

<<Clean-up in [[modular_partition]]>>=
struct class_t *X = class_head->next;
while (X != class_head) {
	struct class_t *Y = X->next;
	class_destroy(X);
	X = Y;
}
class_destroy(class_head);
free(nodes);

@ \section{Partition Refinement}

\subsection{Splitting Classes Using the Neighborhood of a Vertex}

There is essentially one operation we must be able to do with classes, namely
(unordered) refinement by $N(x)$: replacing $\X$ by $\X - N(x), \X \cap N(x)$,
for some vertex $x$ and for all classes $\X$. Note that we only do this when
$x \notin \X$.

To implement this operation efficiently (i.e. in $\mathcal{O}(|N(x)|)$, we
must identify all classes \emph{properly} split by $N(x)$ , and for each of
them move elements of $N(x)$ to a new class. A class is properly split by
$N(x)$ if it intersects $N(x)$ and is not contained in it. To identify them,
we count the number of elements of $N(x)$ in each class.

Because this function share a lot of state with [[modular_partition]], we wrap
all their common state in a [[struct module_ctx_t]].

<<Type definitions>>=
struct module_ctx_t {
	spasm *A;
	struct node_t *nodes;
	<<Extra fields of [[module_ctx_t]]>>
};


<<Functions>>=
void refine(struct module_ctx_t *ctx, struct node_t *x)
{
	<<Prepare iteration over $N(x)$>>
	// printf("Refine with x = %d / N(x) = ", x->vertex + 1);
	// for (int px = Nx_start; px < Nx_end; px++)
	// 	printf("%d ", Aj[px] + 1);
	// printf("\n");
	<<Count nodes of each class $\Y$ belonging to $N(x)$>>
	<<If $\Y$ is properly split, then create $\Y_a$>>
	<<Transfer elements of $N(x)$ from $\Y$ to $\Y_a$>>
	<<Update work queues>>
}

@ In the text, we assume that $x$ is a [[struct node_t *]] variable and that
$\X$ is the class of $x$.

<<Prepare iteration over $N(x)$>>=
int *Ap = ctx->A->p;
int *Aj = ctx->A->j;
int Nx_start = Ap[x->vertex];
int Nx_end = Ap[x->vertex + 1];
struct class_t *X = x->class;
struct node_t *nodes = ctx->nodes;

@ To count the nodes of $N(x)$ that are inside each class, we add an extra
[[marks]] field to [[struct class_t]]. It is initially set to zero, and reset
to zero after use. The [[split]] field will indicate which classes are
properly split.

<<Extra fields of [[struct class_t]]>>=
int marks;
int split;

<<Setup extra fields of [[C]]>>=
C->marks = 0;
C->split = 0;
 
<<Count nodes of each class $\Y$ belonging to $N(x)$>>=
for (int it = Nx_start; it < Nx_end; it++) {
	struct node_t *y = &nodes[Aj[it]];
	y->class->marks++;
}

@ If a class is properly split, we create its ``companion'' split class and
insert it in the class list (we thus only obtain a modular partition and not a
factorizing permutation --- for this we would have to determine whether it has
to be inserted left or right of the original class). All [[marks]] are reset,
and [[split]] is set. For each split class $\Y$, the companion class $\Y_a$ is
immediately on the right in the class list.

<<If $\Y$ is properly split, then create $\Y_a$>>=
for (int it = Nx_start; it < Nx_end; it++) {
	struct node_t *y = nodes + Aj[it];
	struct class_t *Y = y->class;
	if (Y != X && Y->marks > 0 && Y->marks < Y->size) {
		// print_class(Y);
		// printf(" is properly split by %d\n", x->vertex);
		struct class_t *Ya = class_new();
		class_insert(Y, Ya);
		Y->split = 1;
	}
	Y->marks = 0;
}

@ And now, the core of the refinement procedure: moving elements to the newly
created companion classes. Note that we exploit the fact that $\Y_a$ is
immediately on the right of $\Y$ in the class list.

<<Transfer elements of $N(x)$ from $\Y$ to $\Y_a$>>=
for (int it = Nx_start; it < Nx_end; it++) {
	struct node_t *y = &nodes[Aj[it]];
	struct class_t *Y = y->class;
	if (!Y->split)
		continue;
	struct class_t *Ya = Y->next;
	transfer(Y, Ya, y);
}

@ \subsection{High-Level Structure of the Partition Refinement Algorithm}

We are now ready to write the whole algorithm. It maintains two ``work
queues'' $L$ and $K$ with asymmetric roles. $K$ must be a queue while $L$ can
be a stack. They both contain classes. The largest class of the initial
partition is put in $K$ and the others in $L$ (this is the application of the
so-called Hopcroft rule).

The algorithm loops until both $L$ and $K$ are empty. It selects a set $S$
and refines the partition using the neighborhood of every $x \in S$. There are
two cases though: either $S$ is a whole class (when $L \neq \emptyset$) or $S$
is a singleton (when $L = \emptyset$). This prompt us to treat the two cases
slighlty differently.

<<Refine the partition>>=
<<Setup partition refinement>>
while (<<$L \neq \emptyset \wedge K \neq \emptyset$>>) {
	// print_partition(class_head);
	if (<<$L = \emptyset$>>) {
		<<Dequeue $\X$ from $K$>>
		//printf("Dequeuing from K : ");
		//print_class(X);
		//printf("\n");
		struct node_t * x = X->nodes->next;
		refine(&ctx, x);
	} else {
		<<Pop $\X$ from $L$>>
		//printf("Popped from L : ");
		//print_class(X);
		//printf("\n");
		for (struct node_t *x = X->nodes->next; x != X->nodes; x = x->next)
			refine(&ctx, x);
	}
}
<<Clean-up for partition refinement>>


<<Extra fields of [[module_ctx_t]]>>=
struct class_t ** L;
struct class_t ** K;
int L_sp, K_lo, K_hi;

@ The active part of $L$ is [[L[0:L_sp]]] while the active part of $K$ is
[[K[K_lo:K_hi]]].

<<$L = \emptyset$>>=
ctx.L_sp == 0

<<$L \neq \emptyset \wedge K \neq \emptyset$>>=
ctx.L_sp > 0 || ctx.K_lo < ctx.K_hi

<<Setup partition refinement>>=
struct module_ctx_t ctx;
ctx.A = A;
ctx.nodes = nodes;
ctx.L = spasm_malloc(n * sizeof(struct class_t *));
ctx.K = spasm_malloc(n * sizeof(struct class_t *));
ctx.L_sp = 0;
ctx.K_lo = 0;
ctx.K_hi = 0;
<<Find the largest class and append it to $K$; add the others to $L$>>

<<Clean-up for partition refinement>>=
free(ctx.L);
free(ctx.K);

<<Find the largest class and append it to $K$; add the others to $L$>>=
struct class_t *Z = class_head->next;
for (struct class_t *X = Z; X != class_head; X = X->next)
	if (X->size > Z->size) {
		ctx.L[ctx.L_sp++] = Z;
		Z = X;
	} else {
		ctx.L[ctx.L_sp++] = X;
	}
ctx.K[ctx.K_hi++] = Z;


@ We now have to deal with the update of the work queues after each refinement
step. A quick look at the algorithm reveals that we must be able to tell if
a class belongs to $L$ or to $K$. This calls for extra fields in the classes.

<<Extra fields of [[struct class_t]]>>=
int Lpos;
int Kpos;

<<Setup extra fields of [[C]]>>=
C->Lpos = -1;
C->Kpos = -1;

<<Dequeue $\X$ from $K$>>=
struct class_t *X = ctx.K[ctx.K_lo++];
X->Kpos = -1;

<<Pop $\X$ from $L$>>=
struct class_t *X = ctx.L[--ctx.L_sp];
X->Lpos = -1;

@ We are now ready to complete the [[refine]] function. Once a refinement step
has been completed, we must iterate over all classes $\Y$ that have been split
and add them to either $L$ or $K$. To identify them, we traverse $N(x)$ again
and use the [[split]] flag, which we reset.

<<Update work queues>>=
for (int it = Nx_start; it < Nx_end; it++) {
	struct node_t *y = nodes + Aj[it];
	struct class_t *Y = y->class->prev;
	if (Y->split) {
		struct class_t *Ya = Y->next;
		// printf("Processing update to classes Yb = ");
		// print_class(Y);
		// printf(" and Ya = ");
		// print_class(Ya);
		// printf("\n");
		Y->split = 0;
		<<Update work queues with split class $\Y$>>
	}
}

@ The algorithm goes as follows: if $\Y$ was in $L$ before the refinement
step, then both $\Y_a = \Y \cap N(x)$ and $\Y_b = \Y - N(x)$ must be in $L$
after refinement. Because refinement works ``in place'', $\Y$ has become
$\Y_b$, to it just remains to add $\Y_a$ to $L$.

If $\Y$ was not in $L$ before, then we add the largest bewteen $\Y_a$ and
$\Y_b$ to $K$ and the smallest to $L$.

<<Update work queues with split class $\Y$>>=
struct class_t **L = ctx->L;
struct class_t **K = ctx->K;
<<If $\Y \in L$, then add $\Y_a$ to $L$ and [[continue]]>>
struct class_t *Ymin, *Ymax;
if (Y->size < Ya->size) {
	Ymin = Y;
	Ymax = Ya;
} else {
	Ymin = Ya;
	Ymax = Y;
}
// printf("Ymin = ");
// print_class(Ymin);
// printf("\nYmax = ");
// print_class(Ymax);
// printf("\n");
<<Add $\Y_{\min}$ to $L$>>
<<If $\Y \in K$ then replace $\Y$ by $\Y_{\max}$ in $K$, else append $\Y_{\max}$ to $K$>>


<<If $\Y \in L$, then add $\Y_a$ to $L$ and [[continue]]>>=
if (Y->Lpos >= 0) {
	Ya->Lpos = ctx->L_sp;
	L[ctx->L_sp++] = Ya;
	// printf("Split class was already in L. Adding to L: ");
	// print_class(Ya);
	// printf("\n");
	continue;
}

<<Add $\Y_{\min}$ to $L$>>=
// printf("Adding Ymin to L\n");
Ymin->Lpos = ctx->L_sp;
L[ctx->L_sp++] = Ymin;


@ Dealing with the replacement of $\Y$ by $\Y_{\max}$ in $K$ requires avoiding a
potential mistake: $\Y$ has been transformed into $\Y_b$, and if $\Y_{\max} =
Y_b$, then it is already there and we must not do anything.

<<If $\Y \in K$ then replace $\Y$ by $\Y_{\max}$ in $K$, else append $\Y_{\max}$ to $K$>>=
if (Y->Kpos >= 0) {
	if (Y != Ymax) {
		Ymax->Kpos = Y->Kpos;
		K[Y->Kpos] = Ymax;
		Y->Kpos = -1;
		// printf("Split class was in K, and the Ymax part replaces the smallest part in K\n");
	} else {
		// printf("Split class was in K, and the largest part remains in K\n");
	}
} else {
	// printf("Split class was not in K. Adding Ymax to K\n");
	Ymax->Kpos = ctx->K_hi;
	K[ctx->K_hi++] = Ymax;
}


@ \section{Building the Result}

Armed with the modular partition, we may build the three matrices announced at
the beginning. It is actually easier to build them in triplet form and
compress them just before the end.

<<Build the result and clean-up>>=
<<Walk classes; store module description in [[M]]; tag vertices with modules>>
<<Dispatch edges to $S$ and $Q$>>
<<Finalize result>>


@ To distinguish between intra-module and inter-module edges, vertices are
tagged with their module numbers, which requires a new [[module]] array.

<<Walk classes; store module description in [[M]]; tag vertices with modules>>=
int m = 0;
int *module = spasm_malloc(sizeof(int) * n);
// debugging purposes
for (int i = 0; i < n; i++)
	module[i] = -1;
spasm_triplet *M = spasm_triplet_alloc(0, 0, n, -1, 0);
for (struct class_t *X = class_head->next; X != class_head; X = X->next) {
	for (struct node_t *u = X->nodes->next; u != X->nodes; u = u->next) {
		module[u->vertex] = m;
		spasm_add_entry(M, m, u->vertex, 1);
	}
	m++;
}


@ Next, we process edges. Edges internal to a module (which can now be checked
thanks to [[module]]) are added to $S$. Quotient edges are added to $Q$. To
find quotient edges, it is sufficient to examine a single vertex per class. A
potential problem is that the examined vertex can have manu edges to a single
other module, and we must collapse them. To this end, we allocate yet another
array, [[module_reached]].

<<Dispatch edges to $S$ and $Q$>>=
spasm_triplet *S = spasm_triplet_alloc(n, n, spasm_nnz(A), -1, 0);
spasm_triplet *Q = spasm_triplet_alloc(m, m, n + m, -1, 0);
int *module_reached = spasm_malloc(m * sizeof(int));
for (int i = 0; i < m; i++)
	module_reached[i] = -1;
for (struct class_t *X = class_head->next; X != class_head; X = X->next) {
	int first = 1;
	for (struct node_t *x = X->nodes->next; x != X->nodes; x = x->next) {
		int u = x->vertex;
		assert(module[u] >= 0);
		for (int it = Ap[u]; it < Ap[u + 1]; it++) {
			int v = Aj[it];
			assert(module[v] >= 0);
			int Mu = module[u];
			int Mv = module[v];
			if (Mu == Mv) {
				// fprintf(stderr, "%d -> %d, inside module\n", u + 1, v + 1);
				spasm_add_entry(S, u, v, 1);
			} else {
				if (first && module_reached[Mv] != Mu) {
					// fprintf(stderr, "%d -> %d, from module %d to other module %d\n", u + 1, v + 1, Mu, Mv);
					spasm_add_entry(Q, Mu, Mv, 1);
					module_reached[Mv] = Mu;
				}
			}
		}
		first = 0;
	}
}
free(module_reached);
free(module);

@ All it remains to do now is produce the actual result by converting to CSR.

<<Finalize result>>=
<<Clean-up in [[modular_partition]]>>
struct modular_partition_t *R = spasm_malloc(sizeof(*R));
R->S = spasm_compress(S);
spasm_triplet_free(S);
R->Q = spasm_compress(Q);
spasm_triplet_free(Q);
R->M = spasm_compress(M);
spasm_triplet_free(M);
return R;


@ \section{The Main Program}

<<modules.c>>=
<<Include files>>
<<Type definitions>>
<<Functions>>
<<The [[modular_partition]] function>>

int main(int argc, char **argv)
{
	<<Process command-line options>>
	<<Load matrix from [[stdin]]>>
	struct modular_partition_t *partition = modular_partition(A);
	<<Print what the user wants>>
	<<Clean-up in [[main]]>>
	return 0;
}

@ Let's start with the boring stuff: includes and command-line options. By
default, the program prints human-readable statistics. But it can also print
on standard output any of the three matrices.

<<Include files>>=
#include <assert.h>
#include <stdio.h>
#include <getopt.h>
#include <err.h>
#include "spasm.h"

<<Process command-line options>>=
int ch;
struct option longopts[6] = {
	{"tabulated", no_argument, NULL, 't'},
	{"verbose", no_argument, NULL, 'v'},
	{"M", no_argument, NULL, 'M'},
	{"Q", no_argument, NULL, 'Q'},
	{"S", no_argument, NULL, 'S'},
	{NULL, 0, NULL, 0}
};

char mode = -1;
while ((ch = getopt_long(argc, argv, "", longopts, NULL)) != -1) {
	switch (ch) {
	case 't':
	case 'v':
	case 'M':
	case 'Q':
	case 'S':
		if (mode != -1)
			errx(1, "incompatible options");
		mode = ch;
		break;
	default:
	    errx(1, "Unknown option");
	}
}
if (mode == -1) {
	warnx("Choosing verbose mode by default");
	mode = 'v';
}


@ Loading the matrix is standard for \textsf{SpaSM} programs, however we
directly load it in MatrixMarket format. The trick is that we want to remove
diagonal entries (which corresponds to self-edges), so we have to make an
additional pass at the data.

<<Load matrix from [[stdin]]>>=
spasm_triplet * T = spasm_load_mm(stdin, -1);
assert (T->n == T->m);
<<Remove self-edges>>
spasm * A = spasm_compress(T);
spasm_triplet_free(T);

<<Remove self-edges>>=
int *Ti = T->i;
int *Tj = T->j;
for (int px = 0; px < T->nz; px++) {
	if (Ti[px] == Tj[px]) {
		spasm_swap(Ti, px, T->nz - 1);
		spasm_swap(Tj, px, T->nz - 1);
		T->nz--;
	}
}

<<Clean-up in [[main]]>>=
spasm_csr_free(A);

@ Now the output. The easy case is when the user wants one of the three
matrices. If she wants statistics, then we must first compute them.

<<Print what the user wants>>=
switch (mode) {
case 'Q':
	spasm_save_csr(stdout, partition->Q);
	break;
case 'M':
	spasm_save_csr(stdout, partition->M);
	break;
case 'S':
	spasm_save_csr(stdout, partition->S);
	break;
case 'v':
case 't':
	{ <<Accumulate and print statistics>> };
	break;
}

@ The statistics we easy to extract from the [[partition]] computed earlier.

<<Accumulate and print statistics>>=
int trivial = 0;
int nontrivial = 0;
int nontrivial_size = 0;
int largest = 0;
int module_edges = spasm_nnz(partition->S);
int quotient_edges = spasm_nnz(partition->Q);
spasm *M = partition->M;
int m = M->n;
for (int i = 0; i < m; i++) {
	int size = spasm_row_weight(M, i);
	if (size == 1) {
		trivial++;
	} else {
		nontrivial++;
		nontrivial_size += size;
	}
	largest = spasm_max(largest, size);
}
<<Perform safety checks>>
if (mode == 't')
	printf("%d; %d; %d; %d; %d; %d; %d; %d\n", A->n, 
		spasm_nnz(A), trivial, nontrivial, nontrivial_size, largest, module_edges, quotient_edges);
if (mode == 'v')
	printf("NotImplemented\n");

@ The ``safety checks'' should be removed once I get enough assurance that the
code is correct. Basically, we should check that the input graph can be
reconstructed from [[partition]]. This is costly, so instead we only check
that the reconstruction would have the right number of vertices and edges.

<<Perform safety checks>>=
// we have not lost vertices
assert(nontrivial_size + trivial == A->n);
// we have not lost edges
int edges = module_edges;
spasm *Q = partition->Q;
int *Qp = Q->p;
int *Qj = Q->j;
for (int i = 0; i < m; i++)
	for (int it = Qp[i]; it < Qp[i + 1]; it++) {
		int j = Qj[it];
		edges += spasm_row_weight(M, i) * spasm_row_weight(M, j);
	}
assert(edges == spasm_nnz(A));


<<Clean-up in [[main]]>>=
spasm_csr_free(partition->S);
spasm_csr_free(partition->M);
spasm_csr_free(partition->Q);
free(partition);	


@ \end{document}
