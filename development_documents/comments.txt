==========Urgent===================
continue: refuse to continue a job terminated at initialization!

Copy right of SPASM

issue in the dev_log.txt at 2022.0923 [II] needs to be improved.

test cutting double propagators, the program should refuse to compute.

seeding denominators by denominator types is very very risky, what if FIBP decends all denominator indices? The seeding will never end because it dose not cover enough denominator degree!
Oh there is another problem discovered by user, the seeding of denominator indeed need to be rebuilt! debugModification20230314 is a temp rescuring!

If bottom sector terminate unexpectedly, the process will NOT stuck and summarize. We should prevent this! Add a status checker to ensure all sectors finished before summarizing! Or maybe we can solve this from MissionStatusChecker, to modify one of its deciesion process. It terminates iff all mission finished.

==========Important=================

log the ini and summaries

finding symmetry in initialization can be parallelized

remove subsec IBPs before throwing it into Spasm

find some ways to remove some FIBPs if it is ZETAINI subsector FIBP

clear Singular tmp folder after finished running, it takes 10s MBs disk, wasting.

numeric point could be not general enough! For example, in doublepentagon, I once set {s12->1,s23->3,s34->73,s45->7,s15->213,...}
then, accidently, one IBP coefficient is (s12+2s23-s45), it vanished! Then NeatIBP gave wrong results.
There are 2 solutions:
1. recently, we can tell the user to set up a generic enough point. And let them know it would giv wrong result if it is not generic enough
2. midtermly, build a detector to see if above situation happens
3. longtermly, rewrite the work flow to let the user putin more generic points.

if we generates numeric points randomly, we should add the values of numeric points (and d) into output.

setup default values for settings!

Check if replacement replaces the variables to numerics, if not, send a warning

[SyzygyRed.wl]
There are some global variables named "m" or "z" etc. in the code. 
  They`d better be changed to some longer names, to avoid possible \
contradiction with user`s code. (Like Litered`s "j").
  But considering we will use this in commandLine, this is not that \
important
 No, it is important if user defines some kinematic variables like m[1]...

also, n=Length[ExternalMomenta]+1;
	L=Length[LoopMomenta];
same issue as above

Some parameters need to be made optional, eg. degree bound

SDim seems unecessary in the code, try get rid of it?

The IntegralOrder is a global variable... not so good, we would be better set a default value of it. 





RelavantIntegrals is useless... We do not need to export them.


Consider a question: Can user compute 2 or more different projects at the same time?

Clean up useless trashes!

Common input errors:
external momenta not represented by Kinematics, 
generic point not cover all kinematic variables

why do we need to seed starting from initial step +1 in the for loop? What if the initial step IBPs are already enough for the targets?

figure out why there is a label (* this is not the final MI *)


add diagram name into monitor

=============Not Important=================
why do we need to set TemporaryDirectory everywhere?

Generate nFIBPs is slow because of CoefficientRules, I do not know the way to improve it.
Zurich seeding step for high degree seeds is slow, which is due to Replacements in function IntegralRealization. Also, no idea for improvements for now.

in MissionStatusChecker.wl, the first code block, ......=Infinity, I do not know why...

what does "mapped sectors" mean? the naming in the codes are confusing. the concept "mapped and sub sectors" is not accurate. it should be "image or sub sectors."

In Initialization.wl, there is a comment:
(*
Here, some targets from symmetry are collected and will be labeled to be from sector "-1" (which means from user input.)
But they are not!
Although they will not cause error but may cause confusion while debugging.
No need to change, but better to change.
*)
Can be improved.


